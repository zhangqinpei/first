//函数单一职责
//单一抽象层原则
//一行代码一件事
//一变量一含义
//函数不超过50行
//圈复杂度不超过10（if / while / for / case / catch / 三元运算符）
//命名具备自释性
//嵌套层数不超过三层
//函数参数不超过7个

阅读代码简洁之道
1.遵循优秀的经验，长久的坚持，便会拥有简洁感和代码感，写出干练的代码。 要求我们站在巨人的肩膀上 打造简洁优秀的代码世界
2.勒布朗法则 稍等再做等于永不再做  不要想着下次写出好的代码或者下次再修改代码， 要求我们从第一行代码开始就要认真对待，系统化考虑和规划，扣好代码的第一粒扣子
3.代码的简洁不仅关乎效率，更关乎生产，糟糕的代码会随着时间的推移变得更糟糕，我们应该写出好的代码，享受时间的复利，而不是忍受时间这把达摩克里斯之剑
4.减少代码的重复 增加代码的表达力

一 有意的命名
1.使用恰到的英文命名
2.使用可搜索的命名
3.类名和对象名应该是名词或名词短语，如Customer

二 函数名应短小  一个函数说一个事  自顶向下函数带动函数
//#include <iostream>
//#include <string>
//
//// 较高抽象层级的函数
//std::string getHtml() {
//    return "<html><body><h1>Hello, World!</h1></body></html>";
//}
//
//// 中等抽象层级的函数
//std::string renderHtml() {
//    std::string pagePath = getHtml();
//    return pagePath + "\n";
//}
//
//// 相对较低抽象层级的函数
//void displayHtml() {
//    std::string htmlContent = renderHtml();
//    std::cout << htmlContent;
//}
//
//int main() {
//    displayHtml();
//    return 0;
//}

使用描述性的名称
减少函数参数，减少函数输出参数 ，方便测试同学
大函数尽少使用break goto 遵循一个入口 一个出口
注释是代码表达能力的体现  无必要的注释越多则说明 表达能力越弱
坏的注释会误导程序员
格式 注意空白行的存在，提供代码的可读性  每行80个左右字符
制定同一种风格，和团队一起遵守它
模块不应了解它所操作对象的内部情况，应该隐藏对象数据  避免连串调用
使用异常而非返回码 给出异常发生的环境说明 帮助我们判断错误来源
少返回null和少传递null
错误处理让我们的代码更加强固
尝试学会写测试代码  测试和生产代码一样重要
类和函数一样 要尽可能短小 单一原则